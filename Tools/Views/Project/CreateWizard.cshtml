@using System.Linq
@model CreateWizardViewModel

@{ 
    ViewData["Title"] = "Project setup wizard";
    var groupedFeatures = Model.AllFeatures
        .Where(feature => feature.ParentFeatureId is null)
        .OrderBy(feature => feature.Title)
        .ToList();

    var existingProjectName = Context.Request?.HasFormContentType == true
        ? Context.Request!.Form["projectName"].ToString()
        : string.Empty;
}

<section class="wizard-container">
    <div class="wizard-progress"
         data-progress
         data-progress-title="Generating tasks..."
         data-progress-subtitle="This may take a few seconds."
         hidden
         aria-hidden="true">
        <div class="wizard-progress-surface" role="status" aria-live="assertive">
            <div class="wizard-progress-spinner" aria-hidden="true"></div>
            <p class="wizard-progress-title" data-progress-message></p>
            <p class="wizard-progress-subtitle" data-progress-note></p>
        </div>
    </div>

    <div class="wizard-header">
        <h1 class="wizard-title">Project setup wizard</h1>
        <p class="wizard-description">Select the primary capabilities your project needs to reveal detailed sub-features for each area.</p>

        @if (ViewData["SelectedFeaturesSummary"] is string summaryMessage)
        {
            <div class="wizard-alert">@summaryMessage</div>
        }
    </div>

    <form asp-action="GenerateProject" method="post" class="wizard-form">
        @Html.AntiForgeryToken()

        <div class="wizard-project-name">
            <label class="wizard-input-label" for="projectName">Project name</label>
            <input id="projectName" name="projectName" type="text" class="wizard-input-control" maxlength="120" value="@existingProjectName" placeholder="Name your project" autocomplete="off" />
            <p class="wizard-input-hint">Give your project a memorable title. Leave it blank to use a suggested name.</p>
        </div>

        <div class="wizard-grid">
            <aside class="wizard-sidebar">
                <h2 class="sidebar-heading">Primary capabilities</h2>
                <p class="sidebar-description">Choose any of the core capability groups to load the related sub-features.</p>
                <ul class="sidebar-list">
                    @foreach (var feature in groupedFeatures)
                    {
                        <li class="sidebar-item">
                            <label class="sidebar-label">
                                <input type="checkbox"
                                       name="SelectedFeatureIds"
                                       value="@feature.Id"
                                       class="feature-checkbox"
                                       data-feature-id="@feature.Id"
                                       data-depth="0" />
                                <span class="sidebar-title">@feature.Title</span>
                            </label>
                            @if (!string.IsNullOrWhiteSpace(feature.Description))
                            {
                                <span class="sidebar-description-text">@feature.Description</span>
                            }
                        </li>
                    }
                </ul>
            </aside>

            <div class="wizard-content" id="feature-details">
                <h2 class="content-heading">Sub-features</h2>
                <p class="content-description">Enable a primary capability to explore and customise all of its available sub-features here.</p>

                <div class="feature-tree">
                    @foreach (var feature in groupedFeatures)
                    {
                        var rootChildren = Model.AllFeatures
                            .Where(child => child.ParentFeatureId == feature.Id)
                            .OrderBy(child => child.Title)
                            .ToList();

                        <div class="feature-branch" data-root-feature-id="@feature.Id">
                            <div class="feature-branch-header">
                                <h3 class="feature-branch-title">@feature.Title</h3>
                                @if (!string.IsNullOrWhiteSpace(feature.Description))
                                {
                                    <p class="feature-branch-description">@feature.Description</p>
                                }
                            </div>

                            <div class="feature-children" data-parent-id="@feature.Id">
                                @foreach (var child in rootChildren)
                                {
                                    @await Html.PartialAsync("_FeatureTree", new FeatureTreeViewModel(child, Model.AllFeatures, 1))
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="wizard-actions">
            <button type="submit" class="wizard-submit">Create project</button>
        </div>
    </form>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const checkboxSelector = '.feature-checkbox';

            const setRootBranchVisibility = (featureId, isVisible) => {
                const branch = document.querySelector(`.feature-branch[data-root-feature-id="${featureId}"]`);
                if (branch) {
                    branch.style.display = isVisible ? 'block' : 'none';
                }
            };

            const hideChildren = (featureId) => {
                setRootBranchVisibility(featureId, false);

                const container = document.querySelector(`.feature-children[data-parent-id="${featureId}"]`);
                if (!container) {
                    return;
                }

                const childCheckboxes = container.querySelectorAll(checkboxSelector);
                childCheckboxes.forEach(child => {
                    if (child.checked) {
                        child.checked = false;
                        hideChildren(child.dataset.featureId);
                    } else {
                        hideChildren(child.dataset.featureId);
                    }
                    child.disabled = true;
                });

                container.style.display = 'none';
            };

            const showChildren = (featureId) => {
                setRootBranchVisibility(featureId, true);

                const container = document.querySelector(`.feature-children[data-parent-id="${featureId}"]`);
                if (!container) {
                    return;
                }

                container.style.display = 'block';

                const childCheckboxes = container.querySelectorAll(checkboxSelector);
                childCheckboxes.forEach(child => {
                    child.disabled = false;
                });
            };

            const handleCheckboxChange = (checkbox) => {
                const featureId = checkbox.dataset.featureId;

                if (checkbox.checked) {
                    showChildren(featureId);
                    activateAncestors(checkbox);
                } else {
                    hideChildren(featureId);
                }
            };

            const activateAncestors = (checkbox) => {
                const parentId = checkbox.dataset.parentId;
                if (!parentId) {
                    return;
                }

                const parentCheckbox = document.querySelector(`${checkboxSelector}[data-feature-id="${parentId}"]`);
                if (parentCheckbox && !parentCheckbox.checked) {
                    parentCheckbox.checked = true;
                    showChildren(parentId);
                    activateAncestors(parentCheckbox);
                }
            };

            const initialiseTree = () => {
                const allCheckboxes = document.querySelectorAll(checkboxSelector);

                allCheckboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', () => handleCheckboxChange(checkbox));

                    const parentId = checkbox.dataset.parentId;
                    if (parentId) {
                        checkbox.disabled = true;
                    }

                    if (checkbox.checked) {
                        handleCheckboxChange(checkbox);
                    } else if (!parentId) {
                        setRootBranchVisibility(checkbox.dataset.featureId, false);
                    }
                });

            };

            initialiseTree();

            const wizardForm = document.querySelector('.wizard-form');
            const progressPanel = document.querySelector('[data-progress]');
            const submitButton = wizardForm?.querySelector('button[type="submit"]');

            if (progressPanel) {
                const { progressTitle, progressSubtitle } = progressPanel.dataset;
                const progressMessage = progressPanel.querySelector('[data-progress-message]');
                const progressNote = progressPanel.querySelector('[data-progress-note]');

                if (progressMessage && progressTitle) {
                    progressMessage.textContent = progressTitle;
                }

                if (progressNote && progressSubtitle) {
                    progressNote.textContent = progressSubtitle;
                }
            }

            if (wizardForm && progressPanel) {
                wizardForm.addEventListener('submit', () => {
                    progressPanel.hidden = false;
                    progressPanel.setAttribute('aria-hidden', 'false');
                    progressPanel.classList.add('wizard-progress--active');

                    if (submitButton) {
                        submitButton.disabled = true;
                        submitButton.setAttribute('aria-busy', 'true');
                    }
                });
            }
        });
    </script>
}

<style>
    .wizard-container {
        background: #fff;
        border-radius: 1rem;
        box-shadow: 0 10px 40px rgba(15, 23, 42, 0.1);
        padding: 2.5rem;
        margin-bottom: 3rem;
    }

    .wizard-project-name {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 2.5rem;
    }

    .wizard-input-label {
        font-weight: 600;
        font-size: 0.95rem;
        color: #475569;
    }

    .wizard-input-control {
        border: 1px solid #cbd5f5;
        border-radius: 0.75rem;
        padding: 0.6rem 0.85rem;
        font-size: 1rem;
    }

    .wizard-input-control:focus {
        outline: none;
        border-color: #6366f1;
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.15);
    }

    .wizard-input-hint {
        margin: 0;
        font-size: 0.85rem;
        color: #64748b;
    }

    .wizard-header {
        margin-bottom: 2rem;
        text-align: center;
    }

    .wizard-title {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        color: #0f172a;
    }

    .wizard-description {
        color: #475569;
        margin: 0 auto 1rem;
        max-width: 640px;
    }

    .wizard-alert {
        background-color: #f1f5f9;
        border-radius: 0.75rem;
        color: #0f172a;
        display: inline-block;
        margin-top: 1rem;
        padding: 0.75rem 1.25rem;
    }

    .wizard-form {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .wizard-grid {
        display: grid;
        gap: 2rem;
        grid-template-columns: minmax(220px, 280px) 1fr;
    }

    .wizard-sidebar {
        background: #f8fafc;
        border-radius: 1rem;
        padding: 1.5rem;
        position: sticky;
        top: 1.5rem;
        align-self: start;
        height: fit-content;
    }

    .sidebar-heading {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #0f172a;
    }

    .sidebar-description {
        color: #64748b;
        font-size: 0.95rem;
        margin-bottom: 1rem;
    }

    .sidebar-list {
        list-style: none;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .sidebar-item {
        display: flex;
        flex-direction: column;
        gap: 0.35rem;
    }

    .sidebar-label {
        align-items: center;
        cursor: pointer;
        display: flex;
        gap: 0.75rem;
    }

    .sidebar-title {
        font-weight: 600;
        color: #0f172a;
    }

    .sidebar-description-text {
        color: #64748b;
        font-size: 0.9rem;
        padding-inline-start: 1.75rem;
    }

    .wizard-content {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 1rem;
        padding: 1.5rem 2rem;
    }

    .content-heading {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #0f172a;
    }

    .content-description {
        color: #64748b;
        margin-bottom: 1.5rem;
    }

    .feature-tree {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .feature-branch {
        border-bottom: 1px dashed #e2e8f0;
        padding-bottom: 2rem;
        display: none;
    }

    .feature-branch:last-child {
        border-bottom: none;
        padding-bottom: 0;
    }

    .feature-branch-header {
        margin-bottom: 1rem;
    }

    .feature-branch-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
        margin: 0;
    }

    .feature-branch-description {
        color: #64748b;
        font-size: 0.95rem;
        margin: 0.35rem 0 0;
    }

    .feature-node {
        border-left: 3px solid #e2e8f0;
        margin-left: 0.5rem;
        padding-left: 1rem;
    }

    .feature-node[data-depth='0'] {
        border-left: none;
        padding-left: 0;
    }

    .feature-label {
        align-items: center;
        cursor: pointer;
        display: flex;
        gap: 0.75rem;
        font-weight: 600;
        color: #0f172a;
    }

    .feature-description {
        color: #64748b;
        font-size: 0.9rem;
        margin: 0.35rem 0 0.75rem 2.25rem;
    }

    .feature-children {
        border-left: 2px dashed #cbd5f5;
        margin-top: 1rem;
        margin-left: 0.75rem;
        padding-left: 1.25rem;
        display: none;
    }

    .feature-branch > .feature-children {
        border-left: none;
        margin-left: 0;
        padding-left: 0;
    }

    .wizard-actions {
        display: flex;
        justify-content: flex-end;
    }

    .wizard-submit {
        background: linear-gradient(135deg, #6366f1, #4f46e5);
        border: none;
        border-radius: 999px;
        color: #fff;
        cursor: pointer;
        font-weight: 600;
        padding: 0.85rem 2.25rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .wizard-submit:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(79, 70, 229, 0.25);
    }

    @@media (max-width: 992px) {
        .wizard-grid {
            grid-template-columns: 1fr;
        }

        .wizard-sidebar {
            position: static;
        }

        .wizard-actions {
            justify-content: center;
        }
    }
}
</style>
