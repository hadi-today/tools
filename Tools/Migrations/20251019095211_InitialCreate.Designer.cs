// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tools.Data;

#nullable disable

namespace Tools.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251019095211_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tools.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GeminiApiKey")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HourlyRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(50m);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenAIApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Tools.Models.Core.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Tools.Models.Core.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Tools.Models.Core.ProjectMember", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("Tools.Models.Core.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompletionUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("EstimatedHours")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Tools.Models.Core.TaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskComments");
                });

            modelBuilder.Entity("Tools.Models.Core.WebsiteFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentFeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentFeatureId");

                    b.ToTable("WebsiteFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Establish the project's foundational characteristics and strategic scope.",
                            Title = "Project Foundation & Scope"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Select the core blueprint that best matches the project's goals.",
                            Title = "Core Website Blueprints"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Enhance the project with reusable modules and add-on capabilities.",
                            Title = "Common Modules & Add-ons"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Ensure non-functional requirements and technical safeguards are in place.",
                            Title = "Technical & Foundational Features"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Define the overall licensing model for the project.",
                            ParentFeatureId = 1,
                            Title = "Project Licensing & Type"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Closed-source solution released under a commercial license.",
                            ParentFeatureId = 5,
                            Title = "Proprietary / Commercial Project"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Public repository with community collaboration under licenses like MIT or GPL.",
                            ParentFeatureId = 5,
                            Title = "Open-Source Project"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Determine who will access and use the final solution.",
                            ParentFeatureId = 1,
                            Title = "Target Platform"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Accessible to anyone with an internet connection.",
                            ParentFeatureId = 8,
                            Title = "Public-Facing Website"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Restricted to company employees or internal stakeholders.",
                            ParentFeatureId = 8,
                            Title = "Internal Business Application / Intranet"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Subscription-based product designed for multi-tenant usage.",
                            ParentFeatureId = 8,
                            Title = "Software as a Service (SaaS) Platform"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Professional online presence for established organisations.",
                            ParentFeatureId = 2,
                            Title = "Corporate / Business Website"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Hero section with value proposition and clear calls-to-action.",
                            ParentFeatureId = 12,
                            Title = "Professional Homepage"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Company history, mission and vision messaging.",
                            ParentFeatureId = 12,
                            Title = "About Us Page"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Detailed listing of key offerings and differentiators.",
                            ParentFeatureId = 12,
                            Title = "Services / Products Showcase Page"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Profiles and biographies of key personnel.",
                            ParentFeatureId = 12,
                            Title = "Team Members Page"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Quotes and feedback from satisfied customers.",
                            ParentFeatureId = 12,
                            Title = "Customer Testimonials Section"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Contact form, map and essential contact details.",
                            ParentFeatureId = 12,
                            Title = "Contact Page"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Commerce-ready foundation with catalogue and checkout flows.",
                            ParentFeatureId = 2,
                            Title = "E-commerce Platform"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Structured catalogue management with rich product data.",
                            ParentFeatureId = 19,
                            Title = "Product Catalog System"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Grid or list views with filtering and sorting options.",
                            ParentFeatureId = 20,
                            Title = "Product Listing Pages"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Image gallery, descriptions, specifications and pricing.",
                            ParentFeatureId = 20,
                            Title = "Product Detail Pages"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Hierarchical taxonomy for browsing and discovery.",
                            ParentFeatureId = 20,
                            Title = "Product Categories & Tags"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Track stock levels and manage product availability.",
                            ParentFeatureId = 20,
                            Title = "Inventory Management"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Comprehensive purchase workflow for customers.",
                            ParentFeatureId = 19,
                            Title = "Shopping Cart & Checkout"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Seamless product selection and cart management.",
                            ParentFeatureId = 25,
                            Title = "Add to Cart Functionality"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Shipping, billing and payment captured across guided steps.",
                            ParentFeatureId = 25,
                            Title = "Multi-step Checkout Process"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Allow purchases without mandatory account creation.",
                            ParentFeatureId = 25,
                            Title = "Guest Checkout Option"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Secure payment processing with third-party providers.",
                            ParentFeatureId = 19,
                            Title = "Payment Gateway Integration"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Integrate leading credit card payment services.",
                            ParentFeatureId = 29,
                            Title = "Credit Card Processing (e.g., Stripe)"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Offer PayPal as an alternative payment method.",
                            ParentFeatureId = 29,
                            Title = "PayPal Integration"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Customer account area for orders and profile settings.",
                            ParentFeatureId = 19,
                            Title = "User Account Management"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Customers can review previous orders and live statuses.",
                            ParentFeatureId = 32,
                            Title = "Order History & Status Tracking"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Store frequently used delivery and payment information.",
                            ParentFeatureId = 32,
                            Title = "Saved Shipping & Billing Addresses"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Enhancements that drive engagement and repeat sales.",
                            ParentFeatureId = 19,
                            Title = "Advanced E-commerce Features"
                        },
                        new
                        {
                            Id = 36,
                            Description = "Enable customers to leave qualitative feedback.",
                            ParentFeatureId = 35,
                            Title = "Product Reviews & Ratings System"
                        },
                        new
                        {
                            Id = 37,
                            Description = "Configurable promotions and coupon management.",
                            ParentFeatureId = 35,
                            Title = "Discount Codes & Promotions Engine"
                        },
                        new
                        {
                            Id = 38,
                            Description = "Let customers save items for later consideration.",
                            ParentFeatureId = 35,
                            Title = "Wishlist / Favorites Functionality"
                        },
                        new
                        {
                            Id = 39,
                            Description = "Robust publishing toolkit for editorial teams.",
                            ParentFeatureId = 2,
                            Title = "Blog / Content Platform"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Create, edit and manage long-form content.",
                            ParentFeatureId = 39,
                            Title = "Article / Post Management"
                        },
                        new
                        {
                            Id = 41,
                            Description = "Full-featured editing experience for content creators.",
                            ParentFeatureId = 40,
                            Title = "Rich Text Editor (WYSIWYG)"
                        },
                        new
                        {
                            Id = 42,
                            Description = "Plan content releases ahead of time.",
                            ParentFeatureId = 40,
                            Title = "Scheduled Publishing"
                        },
                        new
                        {
                            Id = 43,
                            Description = "Structure and categorise articles for discoverability.",
                            ParentFeatureId = 39,
                            Title = "Content Organization"
                        },
                        new
                        {
                            Id = 44,
                            Description = "Taxonomy-based organisation for browsing content.",
                            ParentFeatureId = 43,
                            Title = "Categories & Tags System"
                        },
                        new
                        {
                            Id = 45,
                            Description = "Allow readers to quickly locate relevant content.",
                            ParentFeatureId = 43,
                            Title = "Search Functionality"
                        },
                        new
                        {
                            Id = 46,
                            Description = "Interactive tools that keep readers connected.",
                            ParentFeatureId = 39,
                            Title = "Reader Engagement"
                        },
                        new
                        {
                            Id = 47,
                            Description = "Threaded discussions with moderation controls.",
                            ParentFeatureId = 46,
                            Title = "Comment System (with moderation)"
                        },
                        new
                        {
                            Id = 48,
                            Description = "Easy sharing to major social platforms.",
                            ParentFeatureId = 46,
                            Title = "Social Sharing Buttons"
                        },
                        new
                        {
                            Id = 49,
                            Description = "Dedicated space for contributor biographies.",
                            ParentFeatureId = 39,
                            Title = "Author Profiles & Management"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Highlight individual projects and personal expertise.",
                            ParentFeatureId = 2,
                            Title = "Personal Portfolio / Showcase"
                        },
                        new
                        {
                            Id = 51,
                            Description = "Visual gallery with imagery, video and summaries.",
                            ParentFeatureId = 50,
                            Title = "Project Gallery"
                        },
                        new
                        {
                            Id = 52,
                            Description = "Deep dives into selected projects or case studies.",
                            ParentFeatureId = 50,
                            Title = "Detailed Project Pages"
                        },
                        new
                        {
                            Id = 53,
                            Description = "Comprehensive biography and resume style information.",
                            ParentFeatureId = 50,
                            Title = "Bio / Resume Page"
                        },
                        new
                        {
                            Id = 54,
                            Description = "Summarise competencies and technical proficiencies.",
                            ParentFeatureId = 50,
                            Title = "Skills & Expertise Section"
                        },
                        new
                        {
                            Id = 55,
                            Description = "Allow visitors to reach out for collaborations or projects.",
                            ParentFeatureId = 50,
                            Title = "Contact Form for Inquiries"
                        },
                        new
                        {
                            Id = 56,
                            Description = "Secure account lifecycle and authentication flows.",
                            ParentFeatureId = 3,
                            Title = "User Authentication System"
                        },
                        new
                        {
                            Id = 57,
                            Description = "Email and password-based user registration.",
                            ParentFeatureId = 56,
                            Title = "Standard Registration"
                        },
                        new
                        {
                            Id = 58,
                            Description = "Support Google, Facebook, GitHub and similar OAuth providers.",
                            ParentFeatureId = 56,
                            Title = "Social Logins"
                        },
                        new
                        {
                            Id = 59,
                            Description = "Add multi-step verification for increased security.",
                            ParentFeatureId = 56,
                            Title = "Two-Factor Authentication (2FA)"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Self-service password reset workflow.",
                            ParentFeatureId = 56,
                            Title = "Password Reset Functionality"
                        },
                        new
                        {
                            Id = 61,
                            Description = "Role-based access control for different audiences.",
                            ParentFeatureId = 56,
                            Title = "User Roles & Permissions System"
                        },
                        new
                        {
                            Id = 62,
                            Description = "Support multilingual and multi-region experiences.",
                            ParentFeatureId = 3,
                            Title = "Internationalization (i18n)"
                        },
                        new
                        {
                            Id = 63,
                            Description = "Toggleable interface supporting multiple languages.",
                            ParentFeatureId = 62,
                            Title = "Multi-Language Support"
                        },
                        new
                        {
                            Id = 64,
                            Description = "Display pricing in the visitor's preferred currency.",
                            ParentFeatureId = 62,
                            Title = "Multi-Currency Support"
                        },
                        new
                        {
                            Id = 65,
                            Description = "Serve tailored content based on visitor location.",
                            ParentFeatureId = 62,
                            Title = "Region-Specific Content Delivery"
                        },
                        new
                        {
                            Id = 66,
                            Description = "Back-office tools for managing static and media assets.",
                            ParentFeatureId = 3,
                            Title = "Content & Media Management"
                        },
                        new
                        {
                            Id = 67,
                            Description = "Centralised storage for images, videos and documents.",
                            ParentFeatureId = 66,
                            Title = "Media Library"
                        },
                        new
                        {
                            Id = 68,
                            Description = "Manage evergreen pages such as Privacy Policy or Terms.",
                            ParentFeatureId = 66,
                            Title = "Static Page Management"
                        },
                        new
                        {
                            Id = 69,
                            Description = "Friendly content management interface for non-technical users.",
                            ParentFeatureId = 66,
                            Title = "CMS Interface"
                        },
                        new
                        {
                            Id = 70,
                            Description = "Engagement-focused interactive components.",
                            ParentFeatureId = 3,
                            Title = "Interactive Features"
                        },
                        new
                        {
                            Id = 71,
                            Description = "Collect subscribers and integrate with tools like Mailchimp.",
                            ParentFeatureId = 70,
                            Title = "Newsletter Subscription Form"
                        },
                        new
                        {
                            Id = 72,
                            Description = "Allow users to schedule appointments or demos.",
                            ParentFeatureId = 70,
                            Title = "Booking / Appointment Scheduling System"
                        },
                        new
                        {
                            Id = 73,
                            Description = "Connect live chat tools such as Intercom or Crisp.",
                            ParentFeatureId = 70,
                            Title = "Live Chat Integration"
                        },
                        new
                        {
                            Id = 74,
                            Description = "Facilitate asynchronous community conversations.",
                            ParentFeatureId = 70,
                            Title = "Forums / Community Discussion Board"
                        },
                        new
                        {
                            Id = 75,
                            Description = "Optimise visibility and capture actionable insights.",
                            ParentFeatureId = 4,
                            Title = "SEO & Analytics"
                        },
                        new
                        {
                            Id = 76,
                            Description = "Manage meta data, structured URLs and SEO basics.",
                            ParentFeatureId = 75,
                            Title = "On-Page SEO Toolkit"
                        },
                        new
                        {
                            Id = 77,
                            Description = "Keep search engines up to date with site structure.",
                            ParentFeatureId = 75,
                            Title = "Automated XML Sitemap Generation"
                        },
                        new
                        {
                            Id = 78,
                            Description = "Seamless analytics and tag management connections.",
                            ParentFeatureId = 75,
                            Title = "Integration with Google Analytics & GTM"
                        },
                        new
                        {
                            Id = 79,
                            Description = "Add schema markup for enhanced search snippets.",
                            ParentFeatureId = 75,
                            Title = "Structured Data (Schema.org) Markup"
                        },
                        new
                        {
                            Id = 80,
                            Description = "Protect the platform and meet regulatory requirements.",
                            ParentFeatureId = 4,
                            Title = "Security & Compliance"
                        },
                        new
                        {
                            Id = 81,
                            Description = "Force encrypted connections across the application.",
                            ParentFeatureId = 80,
                            Title = "Enforce SSL (HTTPS)"
                        },
                        new
                        {
                            Id = 82,
                            Description = "Mitigate the most common web application vulnerabilities.",
                            ParentFeatureId = 80,
                            Title = "Protection against OWASP Top 10"
                        },
                        new
                        {
                            Id = 83,
                            Description = "Offer consent management and data privacy controls.",
                            ParentFeatureId = 80,
                            Title = "GDPR / CCPA Compliance Tools"
                        },
                        new
                        {
                            Id = 84,
                            Description = "Routine backups to protect against data loss.",
                            ParentFeatureId = 80,
                            Title = "Automated Backups"
                        },
                        new
                        {
                            Id = 85,
                            Description = "Ensure the platform is fast and future ready.",
                            ParentFeatureId = 4,
                            Title = "Performance & Scalability"
                        },
                        new
                        {
                            Id = 86,
                            Description = "Optimised layouts for mobile, tablet and desktop.",
                            ParentFeatureId = 85,
                            Title = "Responsive Design"
                        },
                        new
                        {
                            Id = 87,
                            Description = "Deliver visual assets efficiently and responsively.",
                            ParentFeatureId = 85,
                            Title = "Image Optimization & Lazy Loading"
                        },
                        new
                        {
                            Id = 88,
                            Description = "Distribute content across global edge locations.",
                            ParentFeatureId = 85,
                            Title = "Content Delivery Network (CDN) Integration"
                        },
                        new
                        {
                            Id = 89,
                            Description = "Client and server-side caching for consistently fast loads.",
                            ParentFeatureId = 85,
                            Title = "Advanced Caching Strategy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tools.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tools.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tools.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tools.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tools.Models.Core.ProjectMember", b =>
                {
                    b.HasOne("Tools.Models.Core.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tools.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tools.Models.Core.Task", b =>
                {
                    b.HasOne("Tools.Models.Core.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Tools.Models.Core.TaskComment", b =>
                {
                    b.HasOne("Tools.Models.Core.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tools.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tools.Models.Core.WebsiteFeature", b =>
                {
                    b.HasOne("Tools.Models.Core.WebsiteFeature", "ParentFeature")
                        .WithMany("ChildFeatures")
                        .HasForeignKey("ParentFeatureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentFeature");
                });

            modelBuilder.Entity("Tools.Models.Core.Project", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Tools.Models.Core.Task", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Tools.Models.Core.WebsiteFeature", b =>
                {
                    b.Navigation("ChildFeatures");
                });
#pragma warning restore 612, 618
        }
    }
}
